// <auto-generated />
using System;
using ExpertFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpertFinder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230922170410_IncludeMoreUsers")]
    partial class IncludeMoreUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertFinder.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ExpertFinder.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa828b23-96fa-4cb0-8d22-5e89a10ba3cd"),
                            FullName = "Willem Meints"
                        },
                        new
                        {
                            Id = new Guid("8ba4ba14-bbd0-4f7c-a85a-90725f2bd93f"),
                            FullName = "Joop Snijder"
                        },
                        new
                        {
                            Id = new Guid("bef98bd4-795c-46b7-9295-427de33cb6a6"),
                            FullName = "Emiel Stoelinga"
                        },
                        new
                        {
                            Id = new Guid("589ee3c2-4e59-48fb-a5ca-24dd5960d30a"),
                            FullName = "Rowan Terinathe"
                        },
                        new
                        {
                            Id = new Guid("20b18172-f06b-454b-bd48-3c5573fc4a1c"),
                            FullName = "Lucia Conde Moreno"
                        });
                });

            modelBuilder.Entity("ExpertFinder.Models.Article", b =>
                {
                    b.HasOne("ExpertFinder.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
