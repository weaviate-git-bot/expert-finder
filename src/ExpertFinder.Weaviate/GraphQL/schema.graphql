schema {
  query: WeaviateObj
}

input GetObjectsExpertWhereGeoRangeDistanceInpObj {
  "The maximum distance from the point specified geoCoordinates."
  max: Float!
}

type AggregateArticleMetaObject {
  count: Int
}

"An object containing data about the most frequently occurring values for this property"
type AggregateArticlebodyTopOccurrencesObj {
  "How often the most frequently occurring value for this property occurs"
  occurs: Int
  "The most frequently occurring value for this property"
  value: String
}

"An object containing the path and value of the grouped property"
type AggregateExpertGroupedByObj {
  "The path of the grouped property"
  path: [String]
  "The value of the grouped property"
  value: String
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input GetObjectsArticleGroupInpObj {
  "The force to apply for a particular movements. Must be between 0 and 1 where 0 is equivalent to no movement and 1 is equivalent to largest movement possible"
  force: Float!
  type: GetObjectsArticleGroupInpObjTypeEnum
}

enum GetObjectsArticleGroupInpObjTypeEnum {
  closest
  merge
}

input GetObjectsArticleWhereGeoRangeDistanceInpObj {
  "The maximum distance from the point specified geoCoordinates."
  max: Float!
}

type ExpertAdditionalAnswer {
  endPosition: Int
  hasAnswer: Boolean
  property: String
  result: String
  startPosition: Int
}

"An object allowing Aggregation of %ss on a local Weaviate"
type AggregateObjectsObj {
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  Article(nearVector: AggregateObjectsArticleNearVectorInpObj nearObject: AggregateObjectsArticleNearObjectInpObj "Show the first x results (pagination option)" objectLimit: Int hybrid: AggregateObjectsArticleHybridInpObj ask: QnATransformersAggregateArticleAskInpObj "Show the first x results (pagination option)" limit: Int "Filter options for a local Get query, used to convert the result to the specified filters" where: AggregateObjectsArticleWhereInpObj "Specify which properties to group by" groupBy: [String]): [AggregateArticle]
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  Expert(nearVector: AggregateObjectsExpertNearVectorInpObj nearObject: AggregateObjectsExpertNearObjectInpObj "Show the first x results (pagination option)" objectLimit: Int hybrid: AggregateObjectsExpertHybridInpObj ask: QnATransformersAggregateExpertAskInpObj "Show the first x results (pagination option)" limit: Int "Filter options for a local Get query, used to convert the result to the specified filters" where: AggregateObjectsExpertWhereInpObj "Specify which properties to group by" groupBy: [String]): [AggregateExpert]
}

"An object containing the Operators that can be applied to a 'where' filter"
enum GetObjectsArticleWhereOperatorEnum {
  IsNull
  ContainsAll
  LessThan
  LessThanEqual
  Equal
  GreaterThanEqual
  ContainsAny
  Not
  NotEqual
  Or
  GreaterThan
  WithinGeoRange
  And
  Like
}

"Int or Int[]"
scalar IntGetObjectsExpert

"Hybrid search"
input AggregateObjectsArticleHybridInpObj {
  "Query string"
  query: String
  "Search weight"
  alpha: Float
  "Vector search"
  vector: [Float]
}

"Int or Int[]"
scalar IntAggregateObjectsArticle

"An object containing the Operands that can be applied to a 'where' filter"
input AggregateObjectsArticleWhereOperandsInpObj {
  "Specify a String value that the target property will be compared to"
  valueString: TextStringAggregateObjectsArticle
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntAggregateObjectsArticle
  "Specify a Text value that the target property will be compared to"
  valueText: TextAggregateObjectsArticle
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateAggregateObjectsArticle
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: AggregateObjectsArticleWhereGeoRangeInpObj
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [AggregateObjectsArticleWhereOperandsInpObj]
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatAggregateObjectsArticle
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanAggregateObjectsArticle
  "Contains the Operators that can be applied to a 'where' filter"
  operator: AggregateObjectsArticleWhereOperatorEnum
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input AggregateObjectsExpertWhereInpObj {
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: AggregateObjectsExpertWhereGeoRangeInpObj
  "Specify a String value that the target property will be compared to"
  valueString: TextStringAggregateObjectsExpert
  "Specify a Text value that the target property will be compared to"
  valueText: TextAggregateObjectsExpert
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateAggregateObjectsExpert
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatAggregateObjectsExpert
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [AggregateObjectsExpertWhereOperandsInpObj]
  "Contains the Operators that can be applied to a 'where' filter"
  operator: AggregateObjectsExpertWhereOperatorEnum
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntAggregateObjectsExpert
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanAggregateObjectsExpert
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input QnATransformersGetObjectsArticleAskInpObj {
  "Question to be answered"
  question: String!
  "Properties which contains text"
  properties: [String]
}

enum GetObjectsExpertGroupInpObjTypeEnum {
  closest
  merge
}

"Float or Float[]"
scalar FloatAggregateObjectsArticle

"Int or Int[]"
scalar IntAggregateObjectsExpert

"Int or Int[]"
scalar IntGetObjectsArticle

"String or String[]"
scalar TextGetObjectsExpert

type AggregateExpertMetaObject {
  count: Int
}

enum GetObjectsArticleSortInpObjTypeEnum {
  asc
  desc
}

type ArticleAdditionalAnswer {
  endPosition: Int
  hasAnswer: Boolean
  property: String
  result: String
  startPosition: Int
}

"Float or Float[]"
scalar FloatGetObjectsArticle

"An object containing Aggregation information about this property"
type AggregateArticleauthorIdObj {
  "The total amount of found instances for this property"
  count: Int
  "An object containing data about the most frequently occurring values for this property"
  topOccurrences("Show the first x results (pagination option)" limit: Int): [AggregateArticleauthorIdTopOccurrencesObj]
  "Aggregate on the total amount of found property values"
  type: String
}

"An object containing the Operands that can be applied to a 'where' filter"
input AggregateObjectsExpertWhereOperandsInpObj {
  "Specify a Text value that the target property will be compared to"
  valueText: TextAggregateObjectsExpert
  "Contains the Operators that can be applied to a 'where' filter"
  operator: AggregateObjectsExpertWhereOperatorEnum
  "Specify a String value that the target property will be compared to"
  valueString: TextStringAggregateObjectsExpert
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatAggregateObjectsExpert
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: AggregateObjectsExpertWhereGeoRangeInpObj
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntAggregateObjectsExpert
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanAggregateObjectsExpert
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateAggregateObjectsExpert
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [AggregateObjectsExpertWhereOperandsInpObj]
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input GetObjectsExpertSortInpObj {
  "Specify the path from the Objects fields to the property name (e.g. ['Get', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify the sort order, either ascending (asc) which is default or descending (desc)"
  order: GetObjectsExpertSortInpObjTypeEnum
}

input GetObjectsExpertWhereGeoRangeInpObj {
  "The geoCoordinates that form the center point of the search."
  geoCoordinates: GetObjectsExpertWhereGeoRangeGeoCoordinatesInpObj!
  "The distance from the point specified via geoCoordinates."
  distance: GetObjectsExpertWhereGeoRangeDistanceInpObj!
}

type ArticleAdditionalGroupHitsAdditional {
  distance: Float
  id: String
  vector: [Float]
}

type ExpertAdditionalGroupHitsAdditional {
  distance: Float
  id: String
  vector: [Float]
}

"An object used to get %ss on a local Weaviate"
type GetObjectsObj {
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  Article(bm25: GetObjectsArticleHybridGetBm25InpObj hybrid: GetObjectsArticleHybridInpObj ask: QnATransformersGetObjectsArticleAskInpObj "Show the results after the first x results (pagination option)" offset: Int "Cut off number of results after the Nth extrema. Off by default, negative numbers mean off." autocut: Int nearVector: GetObjectsArticleNearVectorInpObj group: GetObjectsArticleGroupInpObj "Filter options for a local Get query, used to convert the result to the specified filters" where: GetObjectsArticleWhereInpObj groupBy: GetObjectsArticleGroupByInpObj "Show the results after a given ID" after: String "Limit the results set (usually fewer results mean faster queries)" limit: Int sort: [GetObjectsArticleSortInpObj] nearObject: GetObjectsArticleNearObjectInpObj): [Article]
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  Expert(groupBy: GetObjectsExpertGroupByInpObj "Show the results after a given ID" after: String "Limit the results set (usually fewer results mean faster queries)" limit: Int sort: [GetObjectsExpertSortInpObj] nearVector: GetObjectsExpertNearVectorInpObj nearObject: GetObjectsExpertNearObjectInpObj "Filter options for a local Get query, used to convert the result to the specified filters" where: GetObjectsExpertWhereInpObj group: GetObjectsExpertGroupInpObj hybrid: GetObjectsExpertHybridInpObj "Show the results after the first x results (pagination option)" offset: Int "Cut off number of results after the Nth extrema. Off by default, negative numbers mean off." autocut: Int bm25: GetObjectsExpertHybridGetBm25InpObj ask: QnATransformersGetObjectsExpertAskInpObj): [Expert]
}

type ArticleAdditionalClassification {
  basedOn: [String]
  classifiedFields: [String]
  completed: String
  id: String
  scope: [String]
}

type ArticleAdditionalReranker {
  score: Float
}

"Boolean or Boolean[]"
scalar BooleanGetObjectsExpert

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input QnATransformersGetObjectsExpertAskInpObj {
  "Question to be answered"
  question: String!
  "Properties which contains text"
  properties: [String]
}

"An object containing the path and value of the grouped property"
type AggregateArticleGroupedByObj {
  "The path of the grouped property"
  path: [String]
  "The value of the grouped property"
  value: String
}

type ArticleAdditionalGroupGroupedBy {
  path: [String]
  value: String
}

"Float or Float[]"
scalar FloatGetObjectsExpert

input AggregateObjectsArticleNearObjectInpObj {
  "Concept identifier in the uuid format"
  id: String
  "Concept identifier in the beacon format, such as weaviate:\/\/<hostname>\/<kind>\/id"
  beacon: String
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
}

"This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
type AggregateArticle {
  "Aggregate this property\"authorId\""
  authorId: AggregateArticleauthorIdObj
  "Aggregate this property\"body\""
  body: AggregateArticlebodyObj
  "Indicates the group of returned data"
  groupedBy: AggregateArticleGroupedByObj
  "An object used to Get Meta information about Objects on a local Weaviate"
  meta: AggregateArticleMetaObject
  "Aggregate this property\"title\""
  title: AggregateArticletitleObj
}

"An object containing data about the most frequently occurring values for this property"
type AggregateArticleauthorIdTopOccurrencesObj {
  "How often the most frequently occurring value for this property occurs"
  occurs: Int
  "The most frequently occurring value for this property"
  value: String
}

"An object containing data about the most frequently occurring values for this property"
type AggregateArticletitleTopOccurrencesObj {
  "How often the most frequently occurring value for this property occurs"
  occurs: Int
  "The most frequently occurring value for this property"
  value: String
}

"Hybrid search"
input AggregateObjectsExpertHybridInpObj {
  "Query string"
  query: String
  "Search weight"
  alpha: Float
  "Vector search"
  vector: [Float]
}

input AggregateObjectsExpertWhereGeoRangeInpObj {
  "The geoCoordinates that form the center point of the search."
  geoCoordinates: AggregateObjectsExpertWhereGeoRangeGeoCoordinatesInpObj!
  "The distance from the point specified via geoCoordinates."
  distance: AggregateObjectsExpertWhereGeoRangeDistanceInpObj!
}

"Location of the root query"
type WeaviateObj {
  "Filter options for a local Aggregate query, used to convert the result to the specified filters"
  Aggregate: AggregateObjectsObj
  "Get Objects on a local Weaviate"
  Get: GetObjectsObj
}

"An object containing Aggregation information about this property"
type AggregateExpertfullNameObj {
  "The total amount of found instances for this property"
  count: Int
  "An object containing data about the most frequently occurring values for this property"
  topOccurrences("Show the first x results (pagination option)" limit: Int): [AggregateExpertfullNameTopOccurrencesObj]
  "Aggregate on the total amount of found property values"
  type: String
}

"Hybrid search"
input GetObjectsArticleHybridInpObj {
  "Algorithm used for fusing results from vector and keyword search"
  fusionType: FusionEnum
  "Query string"
  query: String
  "Search weight"
  alpha: Float
  "Vector search"
  vector: [Float]
  "Which properties should be included in the sparse search"
  properties: [String]
}

"String or String[]"
scalar TextGetObjectsArticle

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input GetObjectsExpertGroupInpObj {
  type: GetObjectsExpertGroupInpObjTypeEnum
  "The force to apply for a particular movements. Must be between 0 and 1 where 0 is equivalent to no movement and 1 is equivalent to largest movement possible"
  force: Float!
}

"String or String[]"
scalar TextAggregateObjectsExpert

"String or String[]"
scalar TextDateAggregateObjectsExpert

type ArticleAdditionalGroupHits {
  _additional: ArticleAdditionalGroupHitsAdditional
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  authorId: String
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  body: String
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  title: String
}

input GetObjectsExpertHybridGetBm25InpObj {
  "The properties to search in"
  properties: [String]
  "The query to search for"
  query: String
}

type ExpertAdditionalGroup {
  count: Int
  groupedBy: ExpertAdditionalGroupGroupedBy
  hits: [ExpertAdditionalGroupHits]
  id: Int
  maxDistance: Float
  minDistance: Float
}

"String or String[]"
scalar TextStringAggregateObjectsExpert

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input GetObjectsArticleWhereInpObj {
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanGetObjectsArticle
  "Specify a Text value that the target property will be compared to"
  valueText: TextGetObjectsArticle
  "Contains the Operators that can be applied to a 'where' filter"
  operator: GetObjectsArticleWhereOperatorEnum
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateGetObjectsArticle
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: GetObjectsArticleWhereGeoRangeInpObj
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatGetObjectsArticle
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntGetObjectsArticle
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [GetObjectsArticleWhereOperandsInpObj]
  "Specify a String value that the target property will be compared to"
  valueString: TextStringGetObjectsArticle
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input GetObjectsArticleSortInpObj {
  "Specify the path from the Objects fields to the property name (e.g. ['Get', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify the sort order, either ascending (asc) which is default or descending (desc)"
  order: GetObjectsArticleSortInpObjTypeEnum
}

input AggregateObjectsExpertWhereGeoRangeDistanceInpObj {
  "The maximum distance from the point specified geoCoordinates."
  max: Float!
}

"This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
type AggregateExpert {
  "Aggregate this property\"fullName\""
  fullName: AggregateExpertfullNameObj
  "Indicates the group of returned data"
  groupedBy: AggregateExpertGroupedByObj
  "An object used to Get Meta information about Objects on a local Weaviate"
  meta: AggregateExpertMetaObject
}

"String or String[]"
scalar TextStringGetObjectsArticle

"An object containing the Operands that can be applied to a 'where' filter"
input GetObjectsExpertWhereOperandsInpObj {
  "Contains the Operators that can be applied to a 'where' filter"
  operator: GetObjectsExpertWhereOperatorEnum
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateGetObjectsExpert
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatGetObjectsExpert
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: GetObjectsExpertWhereGeoRangeInpObj
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanGetObjectsExpert
  "Specify a Text value that the target property will be compared to"
  valueText: TextGetObjectsExpert
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntGetObjectsExpert
  "Specify a String value that the target property will be compared to"
  valueString: TextStringGetObjectsExpert
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [GetObjectsExpertWhereOperandsInpObj]
}

type ExpertAdditionalGroupGroupedBy {
  path: [String]
  value: String
}

input GetObjectsArticleWhereGeoRangeInpObj {
  "The geoCoordinates that form the center point of the search."
  geoCoordinates: GetObjectsArticleWhereGeoRangeGeoCoordinatesInpObj!
  "The distance from the point specified via geoCoordinates."
  distance: GetObjectsArticleWhereGeoRangeDistanceInpObj!
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input QnATransformersAggregateArticleAskInpObj {
  "Question to be answered"
  question: String!
  "Properties which contains text"
  properties: [String]
}

"String or String[]"
scalar TextDateGetObjectsArticle

enum GetObjectsExpertSortInpObjTypeEnum {
  asc
  desc
}

input GetObjectsExpertNearObjectInpObj {
  "Concept identifier in the uuid format"
  id: String
  "Concept identifier in the beacon format, such as weaviate:\/\/<hostname>\/<kind>\/id"
  beacon: String
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
}

"String or String[]"
scalar TextDateAggregateObjectsArticle

"Boolean or Boolean[]"
scalar BooleanAggregateObjectsExpert

input GetObjectsArticleWhereGeoRangeGeoCoordinatesInpObj {
  "The latitude (in decimal format) of the geoCoordinates to search around."
  latitude: Float!
  "The longitude (in decimal format) of the geoCoordinates to search around."
  longitude: Float!
}

"Hybrid search"
input GetObjectsExpertHybridInpObj {
  "Vector search"
  vector: [Float]
  "Which properties should be included in the sparse search"
  properties: [String]
  "Algorithm used for fusing results from vector and keyword search"
  fusionType: FusionEnum
  "Query string"
  query: String
  "Search weight"
  alpha: Float
}

type ExpertAdditionalGroupHits {
  _additional: ExpertAdditionalGroupHitsAdditional
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  fullName: String
}

input GetObjectsArticleNearObjectInpObj {
  "Concept identifier in the uuid format"
  id: String
  "Concept identifier in the beacon format, such as weaviate:\/\/<hostname>\/<kind>\/id"
  beacon: String
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
}

input AggregateObjectsArticleNearVectorInpObj {
  "Target vector to be used in kNN search"
  vector: [Float]!
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
}

"Float or Float[]"
scalar FloatAggregateObjectsExpert

input AggregateObjectsExpertWhereGeoRangeGeoCoordinatesInpObj {
  "The longitude (in decimal format) of the geoCoordinates to search around."
  longitude: Float!
  "The latitude (in decimal format) of the geoCoordinates to search around."
  latitude: Float!
}

"String or String[]"
scalar TextDateGetObjectsExpert

"An object containing the Operators that can be applied to a 'where' filter"
enum GetObjectsExpertWhereOperatorEnum {
  GreaterThan
  GreaterThanEqual
  LessThan
  Not
  NotEqual
  WithinGeoRange
  IsNull
  Like
  Equal
  LessThanEqual
  ContainsAny
  And
  Or
  ContainsAll
}

"Specify the property of the class to group by"
input GetObjectsExpertGroupByInpObj {
  "Specify the path from the objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]!
  "Specify the number of groups to be created"
  groups: Int!
  "Specify the number of max objects in group"
  objectsPerGroup: Int!
}

input AggregateObjectsArticleWhereGeoRangeInpObj {
  "The geoCoordinates that form the center point of the search."
  geoCoordinates: AggregateObjectsArticleWhereGeoRangeGeoCoordinatesInpObj!
  "The distance from the point specified via geoCoordinates."
  distance: AggregateObjectsArticleWhereGeoRangeDistanceInpObj!
}

"An object containing Aggregation information about this property"
type AggregateArticletitleObj {
  "The total amount of found instances for this property"
  count: Int
  "An object containing data about the most frequently occurring values for this property"
  topOccurrences("Show the first x results (pagination option)" limit: Int): [AggregateArticletitleTopOccurrencesObj]
  "Aggregate on the total amount of found property values"
  type: String
}

input GetObjectsArticleHybridGetBm25InpObj {
  "The query to search for"
  query: String
  "The properties to search in"
  properties: [String]
}

"String or String[]"
scalar TextStringAggregateObjectsArticle

"Boolean or Boolean[]"
scalar BooleanGetObjectsArticle

"An object containing the Operands that can be applied to a 'where' filter"
input GetObjectsArticleWhereOperandsInpObj {
  "Specify a String value that the target property will be compared to"
  valueString: TextStringGetObjectsArticle
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateGetObjectsArticle
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: GetObjectsArticleWhereGeoRangeInpObj
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [GetObjectsArticleWhereOperandsInpObj]
  "Contains the Operators that can be applied to a 'where' filter"
  operator: GetObjectsArticleWhereOperatorEnum
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatGetObjectsArticle
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanGetObjectsArticle
  "Specify a Text value that the target property will be compared to"
  valueText: TextGetObjectsArticle
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntGetObjectsArticle
}

input GetObjectsExpertWhereGeoRangeGeoCoordinatesInpObj {
  "The latitude (in decimal format) of the geoCoordinates to search around."
  latitude: Float!
  "The longitude (in decimal format) of the geoCoordinates to search around."
  longitude: Float!
}

"This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
type Expert {
  _additional: ExpertAdditional
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  fullName: String
}

type ExpertAdditionalClassification {
  basedOn: [String]
  classifiedFields: [String]
  completed: String
  id: String
  scope: [String]
}

"String or String[]"
scalar TextAggregateObjectsArticle

input GetObjectsExpertNearVectorInpObj {
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
  "Target vector to be used in kNN search"
  vector: [Float]!
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
}

"Boolean or Boolean[]"
scalar BooleanAggregateObjectsArticle

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input GetObjectsExpertWhereInpObj {
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [GetObjectsExpertWhereOperandsInpObj]
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Specify a Text value that the target property will be compared to"
  valueText: TextGetObjectsExpert
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanGetObjectsExpert
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateGetObjectsExpert
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntGetObjectsExpert
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatGetObjectsExpert
  "Specify a String value that the target property will be compared to"
  valueString: TextStringGetObjectsExpert
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: GetObjectsExpertWhereGeoRangeInpObj
  "Contains the Operators that can be applied to a 'where' filter"
  operator: GetObjectsExpertWhereOperatorEnum
}

input AggregateObjectsArticleWhereGeoRangeGeoCoordinatesInpObj {
  "The latitude (in decimal format) of the geoCoordinates to search around."
  latitude: Float!
  "The longitude (in decimal format) of the geoCoordinates to search around."
  longitude: Float!
}

input AggregateObjectsExpertNearVectorInpObj {
  "Target vector to be used in kNN search"
  vector: [Float]!
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
}

"Specify the property of the class to group by"
input GetObjectsArticleGroupByInpObj {
  "Specify the path from the objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]!
  "Specify the number of groups to be created"
  groups: Int!
  "Specify the number of max objects in group"
  objectsPerGroup: Int!
}

type ExpertAdditional {
  answer: ExpertAdditionalAnswer
  certainty: Float
  classification: ExpertAdditionalClassification
  creationTimeUnix: String
  distance: Float
  explainScore: String
  group: ExpertAdditionalGroup
  "The UUID of a Object, assigned by its local Weaviate"
  id: String
  lastUpdateTimeUnix: String
  rerank("Property to rank from" property: String "Properties which contains text" query: String): [ExpertAdditionalReranker]
  score: String
  vector: [Float]
}

"An object containing Aggregation information about this property"
type AggregateArticlebodyObj {
  "The total amount of found instances for this property"
  count: Int
  "An object containing data about the most frequently occurring values for this property"
  topOccurrences("Show the first x results (pagination option)" limit: Int): [AggregateArticlebodyTopOccurrencesObj]
  "Aggregate on the total amount of found property values"
  type: String
}

"An object containing the Operators that can be applied to a 'where' filter"
enum AggregateObjectsExpertWhereOperatorEnum {
  NotEqual
  GreaterThan
  LessThanEqual
  ContainsAll
  And
  Or
  LessThan
  ContainsAny
  Like
  Not
  WithinGeoRange
  IsNull
  Equal
  GreaterThanEqual
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input AggregateObjectsArticleWhereInpObj {
  "Specify a Float value that the target property will be compared to"
  valueNumber: FloatAggregateObjectsArticle
  "Specify a Boolean value that the target property will be compared to"
  valueBoolean: BooleanAggregateObjectsArticle
  "Specify a String value that the target property will be compared to"
  valueString: TextStringAggregateObjectsArticle
  "Specify a Text value that the target property will be compared to"
  valueText: TextAggregateObjectsArticle
  "Specify a String value that the target property will be compared to"
  valueDate: TextDateAggregateObjectsArticle
  "Specify both geo-coordinates (latitude and longitude as decimals) and a maximum distance from the described coordinates. The search will return any result which is located less than or equal to the specified maximum distance in km away from the specified point."
  valueGeoRange: AggregateObjectsArticleWhereGeoRangeInpObj
  "Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)"
  path: [String]
  "Contains the Operators that can be applied to a 'where' filter"
  operator: AggregateObjectsArticleWhereOperatorEnum
  "Specify an Integer value that the target property will be compared to"
  valueInt: IntAggregateObjectsArticle
  "Contains the Operands that can be applied to a 'where' filter"
  operands: [AggregateObjectsArticleWhereOperandsInpObj]
}

"An object containing filter options for a local Get query, used to convert the result to the specified filters"
input QnATransformersAggregateExpertAskInpObj {
  "Properties which contains text"
  properties: [String]
  "Question to be answered"
  question: String!
}

"An object containing data about the most frequently occurring values for this property"
type AggregateExpertfullNameTopOccurrencesObj {
  "How often the most frequently occurring value for this property occurs"
  occurs: Int
  "The most frequently occurring value for this property"
  value: String
}

enum FusionEnum {
  rankedFusion
  relativeScoreFusion
}

"This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
type Article {
  _additional: ArticleAdditional
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  authorId: String
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  body: String
  "This property was generated by Weaviate's auto-schema feature on Mon Sep 25 05:59:53 2023"
  title: String
}

type ArticleAdditionalGroup {
  count: Int
  groupedBy: ArticleAdditionalGroupGroupedBy
  hits: [ArticleAdditionalGroupHits]
  id: Int
  maxDistance: Float
  minDistance: Float
}

"String or String[]"
scalar TextStringGetObjectsExpert

type ExpertAdditionalReranker {
  score: Float
}

"An object containing the Operators that can be applied to a 'where' filter"
enum AggregateObjectsArticleWhereOperatorEnum {
  Not
  GreaterThanEqual
  LessThan
  WithinGeoRange
  IsNull
  ContainsAny
  ContainsAll
  Like
  GreaterThan
  Or
  Equal
  LessThanEqual
  And
  NotEqual
}

input AggregateObjectsArticleWhereGeoRangeDistanceInpObj {
  "The maximum distance from the point specified geoCoordinates."
  max: Float!
}

input AggregateObjectsExpertNearObjectInpObj {
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
  "Concept identifier in the uuid format"
  id: String
  "Concept identifier in the beacon format, such as weaviate:\/\/<hostname>\/<kind>\/id"
  beacon: String
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
}

input GetObjectsArticleNearVectorInpObj {
  "Target vector to be used in kNN search"
  vector: [Float]!
  "Normalized Distance between the result item and the search vector. Normalized to be between 0 (identical vectors) and 1 (perfect opposite)."
  certainty: Float
  "The required degree of similarity between an object's characteristics and the provided filter values"
  distance: Float
}

type ArticleAdditional {
  answer: ArticleAdditionalAnswer
  certainty: Float
  classification: ArticleAdditionalClassification
  creationTimeUnix: String
  distance: Float
  explainScore: String
  group: ArticleAdditionalGroup
  "The UUID of a Object, assigned by its local Weaviate"
  id: String
  lastUpdateTimeUnix: String
  rerank("Properties which contains text" query: String "Property to rank from" property: String): [ArticleAdditionalReranker]
  score: String
  vector: [Float]
}